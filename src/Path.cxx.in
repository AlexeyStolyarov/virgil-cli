/**
 * Copyright (C) 2015-2016 Virgil Security Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *     (3) Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <cli/io/Path.h>

#include <cli/io/Logger.h>

#include <stdexcept>
#include <cstdlib>
#include <cstring>
#include <fstream>

#if OS_DARWIN
#include <sys/param.h>
#include <mach-o/dyld.h>
#endif //OS_DARWIN
#if OS_LINUX
#include <linux/limits.h>
#endif //OS_LINUX
#if OS_WIN32
#include <windows.h>
#endif //OS_WIN32
#if OS_UNIX
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#endif //OS_UNIX

static constexpr const char kInstallDirName_Bin[] = "@INSTALL_BIN_DIR_NAME@";
static constexpr const char kInstallDirName_Lib[] = "@INSTALL_LIB_DIR_NAME@";
static constexpr const char kInstallDirName_Man[] = "@INSTALL_MAN_DIR_NAME@";
static constexpr const char kInstallDirName_Cfg[] = "@INSTALL_CFG_DIR_NAME@";
static constexpr const char kInstallDirName_Log[] = "@INSTALL_LOG_DIR_NAME@";

using cli::io::Path;

std::string Path::homePath() {
#if OS_UNIX
    return std::string(std::getenv("HOME"));
#endif //OS_UNIX
#if OS_WIN32
    return joinPath(std::getenv("HOMEDRIVE"), std::getenv("HOMEPATH"));
#endif //OS_WIN32
}

std::string Path::exePath() {
#if OS_DARWIN
    char path[MAXPATHLEN];
    uint32_t size = sizeof(path);
    if (::_NSGetExecutablePath(path, &size) == 0) {
        return std::string(::realpath(path, path));
    }
#endif //OS_DARWIN
#if OS_LINUX
    char path[PATH_MAX];
    ssize_t size = sizeof(path);
    size = ::readlink("/proc/self/exe", path, size);
    return std::string(path, path + size);
#endif //OS_LINUX
#if OS_WIN32
    std::vector<char> path(MAX_PATH);

    // Try to get the executable path with a buffer of MAX_PATH characters.
    DWORD result = ::GetModuleFileNameA(
        nullptr, path.data(), static_cast<DWORD>(path.size())
    );

    // As long the function returns the buffer size, it is indicating that the buffer
    // was too small. Keep enlarging the buffer by a factor of 2 until it fits.
    while(result == path.size()) {
        path.resize(path.size() * 2);
        result = ::GetModuleFileNameA(
            nullptr, path.data(), static_cast<DWORD>(path.size())
        );
    }

    // We've got the path, construct a standard string from it
    if(result != 0) {
        return std::string(path.begin(), path.begin() + result);
    }
#endif //OS_WIN32
    throw std::runtime_error("Can not find executable path.");
}

std::string Path::pathSeparator() {
#if OS_WIN32
    return "\\";
#else
    return "/";
#endif //OS_WIN32
}

std::string Path::prefixPath() {
    if (el::base::utils::Str::endsWith(exePath(), kInstallDirName_Bin)) {
        return removeSubPath(exePath(), kInstallDirName_Bin);
    }
    return exePath();
}

std::string Path::binPath() {
    return joinPath(prefixPath(), kInstallDirName_Bin);
}

std::string Path::libPath() {
    return joinPath(prefixPath(), kInstallDirName_Lib);
}

std::string Path::manPath() {
    return joinPath(prefixPath(), kInstallDirName_Man);
}

std::string Path::cfgPath() {
    return joinPath(homePath(), kInstallDirName_Cfg);
}

std::string Path::logPath() {
    return joinPath(homePath(), kInstallDirName_Log);
}

std::string Path::joinPath(const std::string& left, const std::string& right) {
    return removeSubPath(left, pathSeparator()) + pathSeparator() + right;
}

std::string Path::removeSubPath(const std::string& path, const std::string& subPath) {
    if (el::base::utils::Str::endsWith(path, subPath)) {
        return std::string(path.begin(), path.end() - subPath.size());
    }
    return path;
}

bool Path::exists(const std::string& path, bool considerFile) {
#if OS_UNIX
    struct stat info;
    if (stat(path.c_str(), &info) != 0) {
        return false;
    }
    const bool isDir = (info.st_mode & S_IFDIR) != 0;
    const bool isFile = (info.st_mode & S_IFREG) != 0;
    const bool isLink = (info.st_mode & S_IFLNK) != 0;
    return considerFile ? (isFile || isLink) : isDir;
#elif OS_WIN32
    DWORD fileType = GetFileAttributesA(path);
    if (fileType == INVALID_FILE_ATTRIBUTES) {
        return false;
    }
    const bool isDir = (fileType & FILE_ATTRIBUTE_DIRECTORY) != 0;
    return considerFile ? true : isDir;
#endif  // ELPP_OS_UNIX
}

bool Path::existsFile(const std::string& path) {
    return exists(path, true);
}

bool Path::existsDir(const std::string& path) {
    return exists(path, false);
}

bool Path::createPath(const std::string& path) {
    return el::base::utils::File::createPath(path);
}
