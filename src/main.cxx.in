/**
 * Copyright (C) 2016 Virgil Security Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *     (3) Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <cli/cmd/StandardCommandPrompt.h>
#include <cli/argument/ArgumentRules.h>
#include <cli/argument/ArgumentSource.h>
#include <cli/argument/CommandArgumentSource.h>
#include <cli/argument/InteractiveArgumentSource.h>
#include <cli/command/HubCommand.h>

#include <cli/error/ArgumentError.h>
#include <cli/error/ExitError.h>
#include <cli/logger/Logger.h>

#include <cstdlib>

INITIALIZE_EASYLOGGINGPP

using cli::argument::ArgumentRules;
using cli::argument::ArgumentSource;
using cli::argument::CommandArgumentSource;
using cli::argument::InteractiveArgumentSource;
using cli::cmd::StandardCommandPrompt;
using cli::command::HubCommand;
using cli::error::ExitFailure;
using cli::error::ExitSuccess;

static constexpr char kLoggerDefaultConfFile[] = "@CFG_DIR_PATH@/logger-default.conf";

int main(int argc, char* argv[]) {
    // Configure Logger
    el::Loggers::addFlag(el::LoggingFlag::AutoSpacing);
    el::Loggers::addFlag(el::LoggingFlag::DisableApplicationAbortOnFatalLog);
    el::Loggers::addFlag(el::LoggingFlag::MultiLoggerSupport);
    START_EASYLOGGINGPP(argc, argv);
    if (el::base::utils::File::pathExists(kLoggerDefaultConfFile)) {
        el::Configurations conf(kLoggerDefaultConfFile);
        el::Loggers::reconfigureAllLoggers(conf);
    } else {
        LOG(1, WARNING) << "Failed to read log default configuration file, so use defaults";
    }
    {
        el::Configurations userConf;
        userConf.setToDefault();
        userConf.setGlobally(el::ConfigurationType::Enabled, "true");
        userConf.setGlobally(el::ConfigurationType::Format, "%level %msg");
        userConf.setGlobally(el::ConfigurationType::ToFile, "false");
        userConf.setGlobally(el::ConfigurationType::ToStandardOutput, "true");
        el::Loggers::getLogger(kLoggerId_User)->configure(userConf);
    }

    LOG(INFO) << "Start application.";
    DLOG(INFO) << "Verbose level:" << el::Loggers::verboseLevel();

    try {
        auto commandPrompt = std::make_shared<StandardCommandPrompt>();
        auto commandArgumentSource = std::make_unique<CommandArgumentSource>(argv + 1, argv + argc);
        auto interactiveArgumentSource = std::make_unique<InteractiveArgumentSource>(commandPrompt);
        commandArgumentSource->setNextSource(std::move(interactiveArgumentSource));

        auto argumentRules = std::make_shared<ArgumentRules>();
        commandArgumentSource->setupRules(argumentRules);

        // Process root(hub) command
        auto hubCommand = std::make_unique<HubCommand>();
        hubCommand->process(std::move(commandArgumentSource));
    } catch (const ExitFailure&) {
        // Was handled in-place, was rethrown for exit
        return EXIT_FAILURE;
    } catch (const ExitSuccess&) {
        // Was handled in-place, was rethrown for exit
        return EXIT_SUCCESS;
    } catch (const std::exception& exception) {
        LOG(FATAL) << exception.what();
        std::cerr << "Unexpected error occurred. Contact support for help." << std::endl;
        return EXIT_FAILURE;
    } catch (...) {
        LOG(FATAL) << "Undefined error.";
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
