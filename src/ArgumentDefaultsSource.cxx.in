/**
 * Copyright (C) 2015-2017 Virgil Security Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *     (3) Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <cli/argument/ArgumentDefaultsSource.h>

#include <cli/io/Logger.h>
#include <cli/api/api.h>

using cli::argument::Argument;
using cli::argument::ArgumentDefaultsSource;
using cli::argument::ArgumentParseOptions;

static constexpr const char kAppAccessToken[] = "@CLI_ACCESS_TOKEN@";

#define CHECK_ARG(opt, param) ((argName) == (opt) && (!std::string(param).empty()))


namespace cli { namespace argument {

const char* ArgumentDefaultsSource::doGetName() const {
    return "ArgumentDefaultsSource";
}

void ArgumentDefaultsSource::doInit(const std::string& usage, const ArgumentParseOptions& usageOptions) {
    (void) usage;
    (void) usageOptions;
}

void ArgumentDefaultsSource::doUpdateRules() {
    //TODO: Maybe we need to configure updating rules with CMake options.
}

static Argument findArgument(const std::string& argName) {
    if (CHECK_ARG(arg::value::VIRGIL_CONFIG_APP_ACCESS_TOKEN, kAppAccessToken)) {
        return Argument(std::string(kAppAccessToken));
    }
    return Argument();
}

bool ArgumentDefaultsSource::doCanRead(const char* argName, ArgumentImportance argumentImportance) const {
    (void) argumentImportance;
    return !findArgument(argName).isEmpty();
}

Argument ArgumentDefaultsSource::doRead(const char* argName) const {
    return findArgument(argName);
}

}}
